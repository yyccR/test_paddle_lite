
#include <iostream>
#include "paddle_api.h"
#include "opencv2/core.hpp"
#include "opencv2/opencv.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/highgui.hpp"

using namespace paddle::lite_api;


int test_paddle_ocr_v4_paddle_lite() {
    std::string det_model_file("/Users/yang/CLionProjects/test_paddle_lite/paddle_ocr/v4/ch_PP-OCRv4_det_opt.nb");
    std::string rec_model_file("/Users/yang/CLionProjects/test_paddle_lite/paddle_ocr/v4/ch_PP-OCRv4_rec_opt.nb");
    std::string cls_model_file("/Users/yang/CLionProjects/test_paddle_lite/paddle_ocr/v4/ch_ppocr_mobile_v2.0_cls_opt.nb");
    std::string image_file("/Users/yang/CLionProjects/test_paddle_lite/data/images/insurance.png");

    cv::Mat image = cv::imread(image_file, cv::IMREAD_COLOR);
    cv::Mat image_resize;
    cv::resize(image, image_resize, cv::Size(480, 480));
    image_resize.convertTo(image_resize, CV_32F, 1.0/255.0);
    float w_scale = (float)image.cols / (float)480;
    float h_scale = (float)image.rows / (float)480;

//    cv::transposeND(image, {2,0,1}, image_t);
//    cv::imshow("", image);
//    cv::waitKey(0);


    std::cout << "run paddleocr." << std::endl;
    // 1. Set MobileConfig
    MobileConfig config;
    // 2. Set the path to the model generated by opt tools
    config.set_model_from_file(det_model_file);
    // 3. Create PaddlePredictor by MobileConfig
    std::shared_ptr<PaddlePredictor> predictor = CreatePaddlePredictor<MobileConfig>(config);

    return 0;
}
